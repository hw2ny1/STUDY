변수 선언
var
1. 생략가능
2. 변수호이스팅
3. 암묵적 결합
4. 함수레벨 스코프

let
1. 생략불가능
2. 변수호이스팅이 동작하지 않는 것 처럼
3. 재선언 불가 (재할당은 가능)
4. 블록레벨 스코프

const
1. 재할당 불가
2. 블록레벨 스코프

함수 선언식 - 함수 호이스팅이 발생
함수 표현식 - 변수 호이스팅이 발생, 변수만 끌어 올려져서 에러가 난다.
현업에서는 표현식을 사용, 오류 관리가 편함.

자바스크립트는 오류를 안내려고 하기 때문에, 함수선언후 인자를 넣지않아도 오류가 뜨진 않음.

this 는 자기 참조 변수. python 에서 self랑 비슷함.

함수 호출 방식(호출하는 함수의 종류)
1. 일반함수
2. 객체에서 property의 값이 함수인 - method
3. 생성자 함수
4. 간접호출

2 3 1 순으로 중요.
this가 생성자로 쓰일 때 미래 생성자 함수?
보통 this는 전역객체

=> 로 만든 함수의 경우 자신을 감싼 정적 범위, 자동으로 한 단계 상위의 스코프를 바인딩 -> lexical scope

캡처링과 버블링

lodash

동기와 비동기 -> '동시'가 아닌 '순서'에 대해 생각하자
동기 -> 순서대로 ,  비동기 -> 순서에 상관없이

Call Stack - 요청이 들어올 때 마다 순차적으로 처리하는 LIFO
Web API - javascript 엔진이 아닌 브라우저에서 제공하는 runtime 환경( 시간이 소요되는 작업을 처리)
Task Queue - 비동기 처리된 Callback 함수가 대기하는 Queue(FiFo)
Event Loop - Call Stack과 Task Queue를 지속적으로 모니터링

consol.log만 찍어도 undefined가 출력 되는 이유 REPL

promise를 안쓸시, callback 지옥, 실패에대한 보장X

callback -> promise -> async/await -> axios